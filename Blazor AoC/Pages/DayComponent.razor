@page "/{year:int}/{day:int}"
@inject HttpClient Http
@inject IJSRuntime _jsRuntime 

<div class="section">
    <div class="container">
        @if (dayinfo == null)
        {
            <h3 style="color: #0D0D0D">.</h3>
            <h6 style="color: #0D0D0D">.</h6>
        }
        else
        {
            <h3>Day @(dayinfo.Day) - @(dayinfo.Title)</h3>
            <h6>@(dayinfo.Summary+"  ")<a target="_blank" href="@($"https://adventofcode.com/{dayinfo.Year}/day/{dayinfo.Day}")">AoC Link</a></h6>
        }
    </div>
    
    <div class="container">
        <hr />

        <nav class="level">
            <div class="level-left">
                <div class="level-item">
                    <button class="button is-dark" @onclick="RunCode"><b>Run Code</b></button>
                </div>
                <div class="level-item">
                    <b>Part 1:</b>
                </div>
                <div class="level-item">
                    <input class="input" readonly @bind="part1" />
                </div>
                <div class="level-item">
                    <b>Part 2:</b>
                </div>
                <div class="level-item">
                    <input class="input" readonly @bind="part2" />
                </div>
            </div>
        </nav>
    </div>
    <div class="container">
        <div class="tabs is-fullwidth">
            <ul>
                <li class="@((showInput) ? "is-active" : "")">
                    <a @onclick="ShowInput"><b>Input</b></a>
                </li>
                <li class="@((showCode) ? "is-active" : "")">
                    <a @onclick="ShowCode"><b>Code</b></a>
                </li>
            </ul>
        </div>
    </div>

    @if (showCode)
    {
        <div class="container">
            <div>
                <pre><code class="language-csharp">@codeBlock</code></pre>
            </div>
        </div>
    }

    @if (showInput)
    {
        <div class="container">
            <div>
                <textarea style="font-family: Courier New, Courier, monospace" spellcheck="false" class="textarea inputarea" rows="30" @bind="input"></textarea>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int day { get; set; }

    [Parameter]
    public int year { get; set; }

    private string input { get; set; }
    private string part1 { get; set; }
    private string part2 { get; set; }

    private string codeBlock = string.Empty;
    private string defaultInput = string.Empty;
    private bool showCode = false;
    private bool showInput = true;

    //private Code._2020.Solution solution;

    private dayInfo[] days { get; set; }
    private dayInfo dayinfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        days = await Http.GetFromJsonAsync<dayInfo[]>($"sample-data/dayinfo{year}.json");
        dayinfo = days.Where(p => p.Day.Equals(day)).First();
        codeBlock = await Http.GetStringAsync("Code/2020/Day" + day.ToString("D2") + "/Day" + day + ".txt");
        input = await Http.GetStringAsync("Code/2020/Day" + day.ToString("D2") + "/day" + day + "input.txt");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    private void RunCode()
    {
        Code._2020.Solution solution = SolutionConstructor.SetSolution($"Day{day}", input);
        try { part1 = solution.GetPart1(); } catch (Exception e) { part1 = e.ToString(); } // run async?
        try { part2 = solution.GetPart2(); } catch (Exception e) { part2 = e.ToString(); } 
    }

    private void ShowInput()
    {
        showInput = true;
        showCode = false;
    }

    private void ShowCode()
    {
        showInput = false;
        showCode = true;
    }
}
