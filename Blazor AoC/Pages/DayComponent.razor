@page "/{year:int}/{day:int}"

@using System.Threading
@using System.Diagnostics

@inject HttpClient Http
@inject IJSRuntime _jsRuntime

@implements IDisposable

<div class="section no-bottom-padding">
    @if (dayinfo == null)
    {
        <h3 style="color: #0D0D0D">.</h3>
        <h6 style="color: #0D0D0D">.</h6>
    }
    else
    {
        <h3>Day @(dayinfo.Day) - @(dayinfo.Title)</h3>
        <h6>@(dayinfo.Summary + "  ")<a target="_blank" href="@($"https://adventofcode.com/{dayinfo.Year}/day/{dayinfo.Day}")">AoC Link</a></h6>
    }
    <hr />

    <div class="level-left">
        <nav class="level">
            <div class="level-left">
                <div class="level-item">
                    <button class="button is-dark" @onclick="RunCode" disabled="@isWorking">
                        @if (isWorking)
                        {
                            <b>Working...</b>
                        }
                        else
                        {
                            <b>Run Code</b>
                        }
                    </button>
                </div>
                <div class="level-item">
                    <b>Part 1:</b>
                </div>
                <div class="level-item">
                    <input class="input" readonly @bind="part1">@part1</input>
                </div>
                <div class="level-item">
                    <b>Part 2:</b>
                </div>
                <div class="level-item">
                    <input class="input" readonly @bind="part2" />
                </div>
                    @if (isStopwatch)
                    {
                    <div class="level-item">
                        <b>@sw.ElapsedMilliseconds</b><b>ms</b>
                    </div>
                    }
                </div>
        </nav>
    </div>
</div>

<div class="section no-top-padding no-bottom-padding">
    <div class="tabs is-fullwidth">
        <ul>
            <li class="@((showInput) ? "is-active" : "")">
                <a @onclick="ShowInput"><b>Input</b></a>
            </li>
            <li class="@((showCode) ? "is-active" : "")">
                <a @onclick="ShowCode"><b>Code</b></a>
            </li>
        </ul>
    </div>
    
</div>

<div class="section no-bottom-padding no-top-padding flex-grow-1">
    @if (showCode)
    {
        <pre class="pre-text"><code class="language-csharp">@codeBlock</code></pre>
    }

    @if (showInput)
    {
        <textarea class="textarea inputarea" spellcheck="false" @bind="input"></textarea>
    }
</div>

@code {
    [Parameter]
    public int day { get; set; }

    [Parameter]
    public int year { get; set; }

    private string input { get; set; }
    private string part1 { get; set; }
    private string part2 { get; set; }

    private string codeBlock = string.Empty;
    private string defaultInput = string.Empty;
    private bool showCode = false;
    private bool showInput = true;

    bool isStopwatch = false;
    private Stopwatch sw;
    private CancellationTokenSource cts;

    //private Code._2020.Solution solution;

    private dayInfo[] days { get; set; }
    private dayInfo dayinfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        days = await Http.GetFromJsonAsync<dayInfo[]>($"sample-data/dayinfo{year}.json");
        dayinfo = days.Where(p => p.Day.Equals(day)).First();
        codeBlock = await Http.GetStringAsync($"Code/{year}/Day" + day.ToString("D2") + "/Day" + day + ".txt");
        input = await Http.GetStringAsync($"Code/{year}/Day" + day.ToString("D2") + "/day" + day + "input.txt");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    bool isWorking = false;
    private async void RunCode()
    {
        cts = new CancellationTokenSource();
        var token = cts.Token;

        await ClearValues(token);
        sw = System.Diagnostics.Stopwatch.StartNew();
        Code._2020.Solution solution = SolutionConstructor.SetSolution($"Day{day}", input);

        // Part 1
        try { 
            part1 = await solution.GetPart1(token);
        } catch (Exception e) { 
            if (e is not System.Threading.Tasks.TaskCanceledException)
                part1 = e.ToString(); 
        }

        StateHasChanged();
        await Task.Delay(1);

        // Part 2
        try { 
            part2 = await solution.GetPart2(token);
        } catch (Exception e) { 
            if (e is not System.Threading.Tasks.TaskCanceledException)
                part2 = e.ToString(); 
        }

        sw.Stop();
        isStopwatch = true;
        isWorking = false;
        StateHasChanged();
    }

    private async Task ClearValues(CancellationToken cancellationToken)
    {
        isStopwatch = false;
        isWorking = true;
        part1 = "";
        part2 = "";
        await Task.Delay(1);
    }

    private void ShowInput()
    {
        showInput = true;
        showCode = false;
    }

    private void ShowCode()
    {
        showInput = false;
        showCode = true;
    }

    private void Cancel()
    {
        cts?.Cancel(false);
    }

    public void Dispose()
    {
        Cancel();
    }
}
