using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Blazor_AoC.Code._2020
{
    [Puzzle(23, "Crab Cups")]
    public class Day23 : Solution
    {
        private string inputString = string.Empty;

        // we're going to use an array to store pointers to the next cup, effectively a singly linked list
        // this should prove more efficient than a Class+Dictionary solution
        // i.e { cups[1] = 3, cups[3] = 2, cups[2] = 4, cups[4] = 1 } => the order of cups is 1 3 2 4
        int[] cups;
        int[] input;

        public Day23(string inputBox)
        {
            inputString = inputBox;
            ParseInput();
        }

        public override async Task<string> GetPart1(CancellationToken cancellationToken)
        {
            // Run the game with size of input and 100 moves
            RunGame(input.Length, 100);

            List<int> order = new List<int>();
            int next_cup = cups[1];
            while (!next_cup.Equals(1))
            {
                order.Add(next_cup);
                next_cup = cups[next_cup];
            }
            return string.Join("", order);
        }

        public override async Task<string> GetPart2(CancellationToken cancellationToken)
        {
            // Run the game with size 1,000,000 and 10,000,000 moves
            RunGame(1_000_000, 10_000_000);

            long cup1 = cups[1];
            long cup2 = cups[cups[1]];
            return (cup1*cup2).ToString();
        }

        private void RunGame(int number_of_cups, int turns)
        {
            InitialiseCups(input, number_of_cups);
            // set the first cup equal to the last enumerated or the end of input, depending on if we had extra padding or not
            int cup = number_of_cups > input.Length ? cups[number_of_cups] : cups[input[input.Length - 1]];

            for(int i = 0; i < turns; i++)
            {
                MakeTurn(cup);
                cup = cups[cup];
            }
        }

        private void MakeTurn(int cup)
        {
            int threeCupHead = cups[cup];
            int threeCupTail = cups[cups[cups[cup]]];

            // snip out the 3 cups
            cups[cup] = cups[threeCupTail];

            // find next suitable selected cup
            int next_cup = cup - 1;
            if (next_cup < 1) { next_cup += cups.Length-1; };
            while (threeCupHead.Equals(next_cup) || cups[threeCupHead].Equals(next_cup) || threeCupTail.Equals(next_cup))
            {
                next_cup -= 1;
                if (next_cup < 1) { next_cup += cups.Length-1; };
            }

            // connect set of 3 cups to the right of the new selected cup
            cups[threeCupTail] = cups[next_cup];
            cups[next_cup] = threeCupHead;
        }

        private void InitialiseCups(int[] input, int size)
        {
            cups = new int[size+1];

            // assign the first input values
            for(int i = 0; i < input.Length-1; i++)
            {
                cups[input[i]] = input[i+1];
            }

            // if input is equal or larger than size, then connect the end of input to the start
            if (input.Length >= size)
            {
                cups[input[input.Length - 1]] = input[0];
            }
            else
            {
                // connect the end of input to the start of enumerated values
                cups[input[input.Length - 1]] = input.Length + 1;
                // fill the rest with enumerated values
                for (int j = input.Length + 1; j < size; j++)
                {
                    cups[j] = j + 1;
                }
                // and then connect the end back the start of input
                cups[size] = input[0];
            }
        }

        private void ParseInput()
        {
            input = inputString.Trim().ToCharArray().Select(n => int.Parse(n.ToString())).ToArray();
        }
    }
}
